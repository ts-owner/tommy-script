let merge_sort(arr : [Int]) : [Int] =
    if len(arr) <= 1 then return arr;
    elseif len(arr) == 2 then
        if arr[1] > arr[0] then
            return [arr[0], arr[1]];
        else
            return [arr[1], arr[0]];
        end;
    else
        let result = [];
        let partition = len(arr) / 2;

        let left = [];
        let right = [];

        let i = 0;
        while i < partition do
            push(left, arr[i]);
            push(right, arr[partition + i]);
            i = i + 1;
        end;
        if len(arr) % 2 == 1 then
            push(right, arr[len(arr) - 1]);
        end;

        left = merge_sort(left);
        right = merge_sort(right);

        let r = 0;
        let l = 0;
        while r < len(right) and l < len(left) do
            if left[l] > right[r] then
                push(result, right[r]);
                r = r + 1;
            else
                push(result, left[l]);
                l = l + 1;
            end;
        end;

        while l < len(left) do
            push(result, left[l]);
            l = l + 1;
        end;
        while r < len(right) do
            push(result, right[r]);
            r = r + 1;
        end;
        return result;
    end;
end;

println(merge_sort([5,1,4,6,1,3,10,9]));